{"version":3,"sources":["Preview.js","Speed.js","App.js","getText.js","serviceWorker.js","index.js"],"names":["props","text","split","userInput","className","map","s","i","color","length","key","style","backgroundColor","symbols","sec","wpm","Math","round","initialState","texts","floor","random","getText","started","finished","App","state","onRestart","setState","onUserInputChange","e","val","target","value","setTimer","onFinish","countCorrectSymbols","this","clearInterval","interval","replace","filter","setInterval","prevProps","Preview","onChange","placeholder","readOnly","Speed","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mOAEe,WAACA,GAEZ,IAAMC,EAAOD,EAAMC,KAAKC,MAAM,IACxBC,EAAYH,EAAMG,UAAUD,MAAM,IAExC,OACI,yBAAKE,UAAU,2BAEPH,EAAKI,KAAI,SAACC,EAAEC,GACR,IAAIC,EAKJ,OAJID,EAAIP,EAAMG,UAAUM,SAEpBD,EAAQF,IAAMH,EAAUI,GAAK,UAAY,WAEtC,0BAAMG,IAAKH,EAAGI,MAAO,CAACC,gBAAiBJ,IAASF,QCd5D,WAACN,GAEZ,GAAsB,IAAlBA,EAAMa,SAA+B,IAAdb,EAAMc,IAAW,CACxC,IAAMC,EAAOf,EAAMa,QAAQ,GAAMb,EAAMc,IAAI,IAC3C,OACI,6BAAME,KAAKC,MAAMF,GAAjB,QAIR,OAAO,MCNLG,EAAe,CACnBjB,KCNa,WAEX,IAAMkB,EAAQ,CACV,QACA,QACA,SAGJ,OAAOA,EAAMH,KAAKI,MAAMJ,KAAKK,SAASF,EAAMV,SDFxCa,GACNnB,UAAW,GACXU,QAAS,EACTC,IAAK,EACLS,SAAS,EACTC,UAAU,GAsEGC,E,4MAjEbC,MAAQR,E,EAERS,UAAY,WACV,EAAKC,SAASV,I,EAGhBW,kBAAoB,SAACC,GACnB,IAAMC,EAAMD,EAAEE,OAAOC,MACrB,EAAKC,WACL,EAAKC,SAASJ,GACd,EAAKH,SAAS,CACZzB,UAAW4B,EACXlB,QAAS,EAAKuB,oBAAoBL,M,uDAI7B5B,GACHA,IAAckC,KAAKX,MAAMzB,OAC3BqC,cAAcD,KAAKE,UACnBF,KAAKT,SAAS,CACZJ,UAAW,O,0CAKGrB,GAClB,IAAMF,EAAOoC,KAAKX,MAAMzB,KAAKuC,QAAQ,IAAK,IAC1C,OAAOrC,EAAUqC,QAAQ,IAAK,IAAItC,MAAM,IAAIuC,QAAO,SAACnC,EAAGC,GAAJ,OAAUD,IAAML,EAAKM,MAAIE,S,iCAGlE,IAAD,OACJ4B,KAAKX,MAAMH,UACdc,KAAKT,SAAS,CAACL,SAAS,IACxBc,KAAKE,SAAWG,aAAY,WAC1B,EAAKd,UAAS,SAAAe,GACZ,MAAO,CAAC7B,IAAK6B,EAAU7B,IAAM,QAE9B,Q,+BAKL,OACE,yBAAKV,UAAU,uBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,wBACb,kBAACwC,EAAD,CAAS3C,KAAMoC,KAAKX,MAAMzB,KAAME,UAAWkC,KAAKX,MAAMvB,YACtD,8BACE8B,MAAOI,KAAKX,MAAMvB,UAClB0C,SAAUR,KAAKR,kBACfzB,UAAU,oBACV0C,YAAY,kBACZC,SAAUV,KAAKX,MAAMF,WAEvB,kBAACwB,EAAD,CAAOlC,IAAKuB,KAAKX,MAAMZ,IAAKD,QAASwB,KAAKX,MAAMb,UAChD,yBAAKT,UAAU,cACb,4BAAQA,UAAU,gBAAgB6C,QAASZ,KAAKV,WAAhD,mB,GA1DIuB,aEFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9cd5f9aa.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default (props) => {\r\n\r\n    const text = props.text.split('');\r\n    const userInput = props.userInput.split('');\r\n\r\n    return (\r\n        <div className=\"border rounded p-3 mb-4\">\r\n            {\r\n                text.map((s,i) => {\r\n                    let color;\r\n                    if (i < props.userInput.length)\r\n                    {\r\n                        color = s === userInput[i] ? '#dfffa0' : '#fcbea4';\r\n                    }\r\n                    return <span key={i} style={{backgroundColor: color}}>{s}</span>\r\n                })\r\n            }\r\n        </div> \r\n    )\r\n}","import React from 'react';\r\n\r\nexport default (props) => {\r\n\r\n    if (props.symbols !== 0 && props.sec !== 0) {\r\n        const wpm = (props.symbols/5) / (props.sec/60);\r\n        return (\r\n            <div>{Math.round(wpm)} wpm</div> \r\n        )\r\n    }\r\n\r\n    return null;\r\n}","import React, { Component } from 'react';\nimport Preview from './Preview';\nimport Speed from './Speed';\nimport getText from './getText';\n\nconst initialState = {\n  text: getText(),\n  userInput: '',\n  symbols: 0,\n  sec: 0,\n  started: false,\n  finished: false\n}\n\nclass App extends Component {\n\n  state = initialState;\n\n  onRestart = () => {\n    this.setState(initialState)\n  }\n\n  onUserInputChange = (e) => {\n    const val = e.target.value;\n    this.setTimer();\n    this.onFinish(val);\n    this.setState({\n      userInput: val,\n      symbols: this.countCorrectSymbols(val)\n    })\n  }\n\n  onFinish(userInput) {\n    if (userInput === this.state.text) {\n      clearInterval(this.interval);\n      this.setState({\n        finished : true\n      })\n    }\n  }\n\n  countCorrectSymbols(userInput) {\n    const text = this.state.text.replace(' ', '');\n    return userInput.replace(' ', '').split('').filter((s, i) => s === text[i]).length;\n  }\n\n  setTimer() {\n    if (!this.state.started) {\n      this.setState({started: true});\n      this.interval = setInterval(() => {\n        this.setState(prevProps => {\n          return {sec: prevProps.sec + 1}\n        })\n      }, 1000)\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container mt-5 mb-5\">\n        <div className=\"row\">\n          <div className=\"col-md-6 offset-md-3\">\n            <Preview text={this.state.text} userInput={this.state.userInput}/>\n            <textarea\n              value={this.state.userInput}\n              onChange={this.onUserInputChange} \n              className=\"form-control mb-3\" \n              placeholder=\"Start typing...\"\n              readOnly={this.state.finished}>\n            </textarea>\n            <Speed sec={this.state.sec} symbols={this.state.symbols} />\n            <div className=\"text-right\">\n              <button className=\"btn btn-light\" onClick={this.onRestart}>Restart</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export default () => {\r\n\r\n    const texts = [\r\n        'test1',\r\n        'test2',\r\n        'test3'\r\n    ]\r\n\r\n    return texts[Math.floor(Math.random()*texts.length)]\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}